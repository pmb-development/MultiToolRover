package main;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Collections;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import language.Dictionary;

/**
 *
 * @author emil
 */
public class MTR_IDE extends javax.swing.JFrame implements DocumentListener {

    private static final String COMMIT_ACTION = "commit";

    private static enum Mode {
        INSERT, COMPLETION
    };
    private Mode mode = Mode.INSERT;

    private int columnnum = -1;
    private boolean commandTyped;
    private String lastCommand;

    /**
     * Creates new form MTR_IDE
     */
    public MTR_IDE() {
        initComponents();
        jtaCode.setFont(new Font("Courier", Font.PLAIN, 15));
        jtaCode.getDocument().addDocumentListener(this);
        
        InputMap im = jtaCode.getInputMap();
        ActionMap am = jtaCode.getActionMap();
        im.put(KeyStroke.getKeyStroke("ENTER"), COMMIT_ACTION);
        am.put(COMMIT_ACTION, new CommitAction());
        System.out.println(Dictionary.getInstance().getSyntax().toString());
    }

    private void suggestFullSyntax(String content, int pos, int w) {
        String prefix = content.substring(w + 1).toLowerCase();
        int n = Collections.binarySearch(Dictionary.getInstance().getSyntax(), prefix);
        if (n < 0 && -n <= Dictionary.getInstance().getSyntax().size()) {
            String match = Dictionary.getInstance().getSyntax().get(-n - 1);
            if (match.startsWith(prefix)) {
                String completion = match.substring(pos - w);
                SwingUtilities.invokeLater(
                        new CompletionTask(completion, pos + 1));
            }
        }
    }

    private void suggestCommamnd(String content, int pos, int w) {
        String prefix = content.substring(w + 1).toLowerCase();
        int n = Collections.binarySearch(Dictionary.getInstance().getCommands(), prefix);
        if (n < 0 && -n <= Dictionary.getInstance().getCommands().size()) {
            String match = Dictionary.getInstance().getCommands().get(-n - 1);
            if (match.startsWith(prefix)) {
                String completion = match.substring(pos - w);
                SwingUtilities.invokeLater(
                        new CompletionTask(completion, pos + 1));
            }
        }
    }

    private void suggestParams(String content, int pos, int w) {
        String prefix = content.substring(w + 1).toLowerCase();
        int n = Collections.binarySearch(Dictionary.getInstance().getParams(), prefix);
        if (n < 0 && -n <= Dictionary.getInstance().getParams().size()) {
            String match = Dictionary.getInstance().getParams().get(-n - 1);
            if (match.startsWith(prefix)) {
                String completion = match.substring(pos - w);
                SwingUtilities.invokeLater(
                        new CompletionTask(completion, pos + 1));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jspCode = new javax.swing.JScrollPane();
        jtaCode = new javax.swing.JTextArea();
        jPanControls = new javax.swing.JPanel();
        jbutCheck = new javax.swing.JButton();
        jbutProgram = new javax.swing.JButton();
        jPanInfo = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jspInfo = new javax.swing.JScrollPane();
        jtaInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jtaCode.setColumns(20);
        jtaCode.setRows(5);
        jtaCode.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtaCodeInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jtaCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtaCodeKeyPressed(evt);
            }
        });
        jspCode.setViewportView(jtaCode);

        getContentPane().add(jspCode, java.awt.BorderLayout.CENTER);

        jPanControls.setBackground(new java.awt.Color(0, 102, 102));
        jPanControls.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanControls.setLayout(new javax.swing.BoxLayout(jPanControls, javax.swing.BoxLayout.LINE_AXIS));

        jbutCheck.setText("Check");
        jbutCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutCheckActionPerformed(evt);
            }
        });
        jPanControls.add(jbutCheck);

        jbutProgram.setText("Upload");
        jbutProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbutProgramActionPerformed(evt);
            }
        });
        jPanControls.add(jbutProgram);

        getContentPane().add(jPanControls, java.awt.BorderLayout.PAGE_START);

        jPanInfo.setBackground(new java.awt.Color(0, 102, 102));
        jPanInfo.setLayout(new java.awt.GridBagLayout());

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jPanInfo.add(jSeparator1, new java.awt.GridBagConstraints());

        jtaInfo.setColumns(20);
        jtaInfo.setRows(5);
        jspInfo.setViewportView(jtaInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanInfo.add(jspInfo, gridBagConstraints);

        getContentPane().add(jPanInfo, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtaCodeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtaCodeInputMethodTextChanged

    }//GEN-LAST:event_jtaCodeInputMethodTextChanged

    private void jbutCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutCheckActionPerformed

    }//GEN-LAST:event_jbutCheckActionPerformed

    private void jbutProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbutProgramActionPerformed

    }//GEN-LAST:event_jbutProgramActionPerformed

    private void jtaCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaCodeKeyPressed
        System.out.println(jtaCode.getText());
        
        try {
            int caretpos = jtaCode.getCaretPosition();
            int row = jtaCode.getLineOfOffset(caretpos);
            columnnum = caretpos - jtaCode.getLineStartOffset(row);
        } catch (BadLocationException ex) {

        }

        System.out.println(jtaCode.getText());
        if ((evt.getKeyCode() == KeyEvent.VK_SPACE || evt.getKeyCode() == KeyEvent.VK_ENTER) && columnnum > 0) {
            commandTyped = true;
        } else if (columnnum == 0) {
            commandTyped = false;
        }
    }//GEN-LAST:event_jtaCodeKeyPressed

    private class CompletionTask implements Runnable {

        String completion;
        int position;

        CompletionTask(String completion, int position) {
            this.completion = completion;
            this.position = position;
        }

        @Override
        public void run() {
            jtaCode.insert(completion, position);
            jtaCode.setCaretPosition(position + completion.length());
            jtaCode.moveCaretPosition(position);
            mode = Mode.COMPLETION;
        }
    }

    private class CommitAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent ev) {
            if (mode == Mode.COMPLETION) {
                int pos = jtaCode.getSelectionEnd();
                jtaCode.insert(" ", pos);
                jtaCode.setCaretPosition(pos + 1);
                mode = Mode.INSERT;
            } else {
                jtaCode.replaceSelection("\n");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (System.getProperty("os.name").contains("Mac OS X")) {
                    if ("MAC OS X".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                } else if (System.getProperty("os.name").startsWith("Windows ")) {
                    if ("com.sun.java.swing.plaf.windows.WindowsLookAndFeel".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                } else if (System.getProperty("os.name").startsWith("Linux")) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                } else {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MTR_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MTR_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MTR_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MTR_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MTR_IDE().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanControls;
    private javax.swing.JPanel jPanInfo;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbutCheck;
    private javax.swing.JButton jbutProgram;
    private javax.swing.JScrollPane jspCode;
    private javax.swing.JScrollPane jspInfo;
    private javax.swing.JTextArea jtaCode;
    private javax.swing.JTextArea jtaInfo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent ev) {
        if (ev.getLength() != 1) {
            return;
        }

        int pos = ev.getOffset();
        String content = null;
        try {
            content = jtaCode.getText(0, pos + 1);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }

        // Find where the word starts
        int w;
        for (w = pos; w >= 0; w--) {
            if (!Character.isLetter(content.charAt(w))) {
                break;
            }
        }
        if (pos - w < 1) {
            return;
        }
        
        if(!commandTyped) {
            suggestCommamnd(content, pos, w);
        } else {
            suggestParams(content, pos, w);
        }
        
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }
}
